// ERCIYUAN
precision highp float;
varying highp vec2 textureCoordinate;

uniform sampler2D inputImageTexture;
uniform sampler2D inputImageTexture2;//godlight


uniform vec2 location0;
uniform vec2 location1;
uniform vec2 location2;
uniform vec2 location3;
uniform vec2 location4;
uniform vec2 location5;
uniform vec2 location6;
uniform vec2 location7;
uniform vec2 location8;
uniform vec2 location9;

uniform vec2 location10;
uniform vec2 location11;
uniform vec2 location12;
uniform vec2 location13;
uniform vec2 location14;
uniform vec2 location15;
uniform vec2 location16;
uniform vec2 location17;
uniform vec2 location18;
uniform vec2 location19;

#define x_a 0.72
#define y_a 1.28

#define parameter 1.0
#define glslname_guixiu 0.0

//[@7,@16,@25,@46,@74,@77,@84,@90,@13,@19]

#define p_faceleft location0
#define p_chin location1
#define p_faceright location2
#define p_nose location3
#define p_eyea location4
#define p_eyeb location5
#define p_left location6
#define p_right location7
#define p_chinleft location8
#define p_chinright location9

#define p_faceleft2 location10
#define p_chin2 location11
#define p_faceright2 location12
#define p_nose2 location13
#define p_eyea2 location14
#define p_eyeb2 location15
#define p_left2 location16
#define p_right2 location17
#define p_chinleft2 location18
#define p_chinright2 location19

vec4 plazaX = vec4(0.0);
vec4 plazaY = vec4(0.0);
vec4 plazaZ = vec4(0.0);


vec4 blendNormal(vec4 c1, vec4 c2)
{
    vec4 outputColor;
    outputColor.r = c1.r + c2.r * c2.a * (1.0 - c1.a);
    outputColor.g = c1.g + c2.g * c2.a * (1.0 - c1.a);
    outputColor.b = c1.b + c2.b * c2.a * (1.0 - c1.a);
    outputColor.a = c1.a + c2.a * (1.0 - c1.a);
    return outputColor;
}

vec2 faceStretch(vec2 textureCoord, vec2 originPosition, vec2 targetPosition, float radius, float curve)
{
vec2 direction = targetPosition - originPosition;
float lengthA = length(direction);
float lengthB = min(lengthA, radius);
direction *= lengthB / lengthA;
float infect = distance(textureCoord, originPosition)/radius;
infect = clamp(1.0-infect,0.0,1.0);
infect = pow(infect, curve);

return direction * infect;
}



void main()
{
    gl_FragColor = texture2D(inputImageTexture,textureCoordinate);
    if (parameter < 0.001) {
        return;
    }

    vec2 newCoord = textureCoordinate ;

    if(location3.x > 0.01 && location3.y > 0.01)
    {

        vec2 pngSize = vec2(x_a,y_a);

        vec2 eyea = p_eyea * pngSize;
        vec2 eyeb = p_eyeb * pngSize;
        vec2 left = p_left * pngSize;
        vec2 right = p_right * pngSize;
        vec2 nose = p_nose * pngSize;
        vec2 chin = p_chin * pngSize;


        float weight = 0.0;
        float face_width = distance(eyea,eyeb);


        float eyedis = face_width;

        newCoord = textureCoordinate * pngSize;

        // eye1
        float eyeRadius = distance(eyea, eyeb)*0.26;
        float dis_eye1 = distance(newCoord, eyea);
        if(dis_eye1 <= eyeRadius)
        {
            weight = pow(dis_eye1 / eyeRadius, 0.24);
            newCoord = eyea + (newCoord - eyea) * weight;
        }

        // eye2

        float dis_eye2 = distance(newCoord, eyeb);
        if(dis_eye2 <= eyeRadius)
        {
            weight = pow(dis_eye2 / eyeRadius,0.24);
            newCoord = eyeb + (newCoord - eyeb) * weight;
        }

        float radius = face_width*1.0;

        vec2 leftF = p_faceleft * pngSize;
        vec2 targetleftF = nose + (leftF - nose) * 0.94;
        vec2 leftFplus = vec2(0.0);
        leftFplus = faceStretch(newCoord, leftF, targetleftF, radius, 1.0);
        newCoord = newCoord - leftFplus;

        vec2 rightF = p_faceright * pngSize;
        vec2 targetrightF = nose + (rightF - nose) * 0.94;
        vec2 rightFplus = vec2(0.0);
        rightFplus = faceStretch(newCoord, rightF, targetrightF, radius, 1.0);
        newCoord = newCoord - rightFplus;


        radius = face_width*1.5;
        vec2 targetchin = nose + (chin - nose) * 0.95;
        vec2 chinplus = vec2(0.0);
        chinplus = faceStretch(newCoord, chin, targetchin, radius, 1.0);
        newCoord = newCoord - chinplus;


        vec2 chinCenter = nose + (chin - nose) * 0.7;

        radius = face_width*1.2;
        vec2 leftC = p_chinleft * pngSize;
        vec2 targetleftC = chinCenter + (leftC - chinCenter) * 0.93;
        vec2 leftCplus = vec2(0.0);
        leftCplus = faceStretch(newCoord, leftC, targetleftC, radius, 1.0);
        newCoord = newCoord - leftCplus;

        vec2 rightC = p_chinright * pngSize;
        vec2 targetrightC = chinCenter + (rightC - chinCenter) * 0.93;
        vec2 rightCplus = vec2(0.0);
        rightCplus = faceStretch(newCoord, rightC, targetrightC, radius, 1.0);
        newCoord = newCoord - rightCplus;


        newCoord = textureCoordinate*pngSize+(newCoord-textureCoordinate*pngSize)*parameter;

        gl_FragColor = texture2D(inputImageTexture, newCoord/pngSize);

    }

    if(location13.x > 0.01 && location13.y > 0.01)
    {

        vec2 pngSize = vec2(x_a,y_a);

        vec2 eyea = p_eyea2 * pngSize;
        vec2 eyeb = p_eyeb2 * pngSize;
        vec2 left = p_left2 * pngSize;
        vec2 right = p_right2 * pngSize;
        vec2 nose = p_nose2 * pngSize;
        vec2 chin = p_chin2 * pngSize;



        float weight = 0.0;
        float face_width = distance(eyea,eyeb);


        float eyedis = face_width;

        //newCoord = textureCoordinate * pngSize;

        // eye1
        float eyeRadius = distance(eyea, eyeb)*0.26;
        float dis_eye1 = distance(newCoord, eyea);
        if(dis_eye1 <= eyeRadius)
        {
            weight = pow(dis_eye1 / eyeRadius, 0.24);
            newCoord = eyea + (newCoord - eyea) * weight;
        }

        // eye2

        float dis_eye2 = distance(newCoord, eyeb);
        if(dis_eye2 <= eyeRadius)
        {
            weight = pow(dis_eye2 / eyeRadius,0.24);
            newCoord = eyeb + (newCoord - eyeb) * weight;
        }

        float radius = face_width*1.0;

        vec2 leftF = p_faceleft2 * pngSize;
        vec2 targetleftF = nose + (leftF - nose) * 0.94;
        vec2 leftFplus = vec2(0.0);
        leftFplus = faceStretch(newCoord, leftF, targetleftF, radius, 1.0);
        newCoord = newCoord - leftFplus;

        vec2 rightF = p_faceright2 * pngSize;
        vec2 targetrightF = nose + (rightF - nose) * 0.94;
        vec2 rightFplus = vec2(0.0);
        rightFplus = faceStretch(newCoord, rightF, targetrightF, radius, 1.0);
        newCoord = newCoord - rightFplus;



        radius = face_width*1.5;
        vec2 targetchin = nose + (chin - nose) * 0.95;
        vec2 chinplus = vec2(0.0);
        chinplus = faceStretch(newCoord, chin, targetchin, radius, 1.0);
        newCoord = newCoord - chinplus;


        vec2 chinCenter = nose + (chin - nose) * 0.7;

        radius = face_width*1.2;
        vec2 leftC = p_chinleft2 * pngSize;
        vec2 targetleftC = chinCenter + (leftC - chinCenter) * 0.93;
        vec2 leftCplus = vec2(0.0);
        leftCplus = faceStretch(newCoord, leftC, targetleftC, radius, 1.0);
        newCoord = newCoord - leftCplus;

        vec2 rightC = p_chinright2 * pngSize;
        vec2 targetrightC = chinCenter + (rightC - chinCenter) * 0.93;
        vec2 rightCplus = vec2(0.0);
        rightCplus = faceStretch(newCoord, rightC, targetrightC, radius, 1.0);
        newCoord = newCoord - rightCplus;


        newCoord = textureCoordinate*pngSize+(newCoord-textureCoordinate*pngSize)*parameter;

        gl_FragColor = texture2D(inputImageTexture, newCoord/pngSize);

    }

}