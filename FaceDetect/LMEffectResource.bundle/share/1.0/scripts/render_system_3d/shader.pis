
local c = {}

-----------------Mesh OpenGL ES2 Shader --------------------------------------

c.mesh = {}

c.mesh.es2 = 
{
    vs = 
    [==[
        precision highp float;
        attribute vec4 position;
        attribute vec2 uv;
        attribute vec4 jointIndices;
        attribute vec4 jointWeights;
        attribute vec3 normal;
        varying vec2 uv0;
        uniform mat4 MVPMatrix;
        void main(void)
        {
            gl_Position = MVPMatrix * position;
            uv0 = uv.st;
        }
    ]==],

    fs =
    [==[
        precision highp float;
        varying vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture2D(s_diffuse, uv0);
            vec4 trans = texture2D(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                gl_FragColor = color;
            } else {
                discard;
            }
        }
    ]==]
} 

-----------------Mesh OpenGL ES3 Shader -------------------------------------

c.mesh.es3 =
{
    vs = 
    [==[
        #version 300 es
        precision highp float;
        layout(location=0) in vec4 position;
        layout(location=1) in vec2 uv;
        layout(location=2) in vec4 jointIndices;
        layout(location=3) in vec4 jointWeights;
        layout(location=4) in vec3 normal;
        out vec2 uv0;
        uniform mat4 MVPMatrix;
        void main(void)
        {
            gl_Position = MVPMatrix * position;
            uv0 = uv.st;
        }
    ]==],

    fs = 
    [==[
        #version 300 es
        precision highp float;
        in vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        layout(location=0) out vec4 fragColor;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture(s_diffuse, uv0);
            vec4 trans = texture(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                fragColor = color;
            } else {
                discard;
            }
        }
    ]==]
} 

-----------------Mesh OpenGL Shader -------------------------------------


c.mesh.gl = 
{
    vs = 
    [==[
        #version 400
        precision highp float;
        layout(location=0) in vec4 position;
        layout(location=1) in vec2 uv;
        layout(location=2) in vec4 jointIndices;
        layout(location=3) in vec4 jointWeights;
        layout(location=4) in vec3 normal;
        out vec2 uv0;
        uniform mat4 MVPMatrix;
        void main(void)
        {
            gl_Position = MVPMatrix * position;
            uv0 = uv.st;
        }
    ]==],

    fs = 
    [==[
        #version 400
        precision highp float;
        in vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        layout(location=0) out vec4 fragColor;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture(s_diffuse, uv0);
            vec4 trans = texture(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                fragColor = color;
            } else {
                discard;
            }
        }
    ]==]
} 

-----------------Skeleton OpenGL ES2 Shader --------------------------------------

c.skeleton = {}

c.skeleton.es2 = 
{
    vs = 
    [==[
        #define JOINT_MAX 32
        precision highp float;
        attribute vec4 position;
        attribute vec2 uv;
        attribute vec4 jointIndices;
        attribute vec4 jointWeights;
        attribute vec3 normal;
        varying vec2 uv0;
        uniform mat4 MVPMatrix;
        uniform mat4 JMs[JOINT_MAX];
        void main(void)
        {
            ivec4 indices = ivec4(jointIndices);
            mat4 t = JMs[indices[0]] * jointWeights[0];
            t += JMs[indices[1]] * jointWeights[1];
            t += JMs[indices[2]] * jointWeights[2];
            t += JMs[indices[3]] * (1.0 - jointWeights[0] - jointWeights[1] - jointWeights[2]);
            vec4 posePos = t * position;
            gl_Position = MVPMatrix * posePos;
            uv0 = uv;
        }
    ]==],

    fs = 
    [==[
        precision highp float;
        varying vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture2D(s_diffuse, uv0);
            vec4 trans = texture2D(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                gl_FragColor = color;
            } else {
                discard;
            }
        }
    ]==]
}

c.skeleton.es3 =
{
    vs =
    [==[
        #version 300 es
        #define JOINT_MAX 32
        precision highp float;
        layout(location=0) in vec4 position;
        layout(location=1) in vec2 uv;
        layout(location=2) in vec4 jointIndices;
        layout(location=3) in vec4 jointWeights;
        layout(location=4) in vec3 normal;
        out vec2 uv0;
        uniform mat4 MVPMatrix;
        uniform mat4 JMs[JOINT_MAX];

        void main(void)
        {
            ivec4 indices = ivec4(jointIndices);
            mat4 t = JMs[indices[0]] * jointWeights[0];
            t += JMs[indices[1]] * jointWeights[1];
            t += JMs[indices[2]] * jointWeights[2];
            t += JMs[indices[3]] * (1.0 - jointWeights[0] - jointWeights[1] - jointWeights[2]);
            vec4 posePos = t * position;
            gl_Position = MVPMatrix * posePos;
            uv0 = uv;
        }
    ]==],

    fs = 
    [==[
        #version 300 es
        precision highp float;
        in vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        layout(location=0) out vec4 fragColor;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture(s_diffuse, uv0);
            vec4 trans = texture(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                fragColor = color;
            } else {
                discard;
            }
        }
    ]==]
}

c.skeleton.gl =
{
    vs =
    [==[
        #version 400
        #define JOINT_MAX 32
        precision highp float;
        layout(location=0) in vec4 position;
        layout(location=1) in vec2 uv;
        layout(location=2) in vec4 jointIndices;
        layout(location=3) in vec4 jointWeights;
        layout(location=4) in vec3 normal;
        out vec2 uv0;
        uniform mat4 MVPMatrix;
        uniform mat4 JMs[JOINT_MAX];

        void main(void)
        {
            ivec4 indices = ivec4(jointIndices);
            mat4 t = JMs[indices[0]] * jointWeights[0];
            t += JMs[indices[1]] * jointWeights[1];
            t += JMs[indices[2]] * jointWeights[2];
            t += JMs[indices[3]] * (1.0 - jointWeights[0] - jointWeights[1] - jointWeights[2]);
            vec4 posePos = t * position;
            gl_Position = MVPMatrix * posePos;
            uv0 = uv;
        }
    ]==],

    fs = 
    [==[
        #version 400
        precision highp float;
        in vec2 uv0;
        uniform sampler2D s_diffuse;
        uniform sampler2D s_transparent;
        layout(location=0) out vec4 fragColor;
        float luminance(vec4 color)
        {
            return color.r * 0.212671 + color.g * 0.715160 + color.b * 0.072169;
        }
        void main(void) {
            vec4 color = texture(s_diffuse, uv0);
            vec4 trans = texture(s_transparent, uv0);
            float alpha = luminance(trans);
            if (alpha >= 0.1) {
                fragColor = color;
            } else {
                discard;
            }
        }
    ]==]
}

return c

